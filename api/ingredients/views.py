from rest_framework.decorators import api_view
from rest_framework.response import Response

from api.ingredients.serializers import IngredientSerializer
from ingredients.models import Ingredient
from categories.models import Category


@api_view(['GET'])
def ingredientOverview(request):
    api_urls = {
        'list all ingredients': '/api/ingredients/ingredient-list',
        'list  ingredient of a particular category': '/api/ingredients/category/{categoryId}/ingredient-list',
        'list  ingredients with missing nutritionals': '/api/ingredients/no-nutritionals-ingredient-list',
        'ingredient detail  ': '/api/ingredients/detail/{ingredientID}',
        'create new ingredient ': '/api/ingredients/create',
        'update ingredient ': '/api/ingredients/update/{ingredientID}',
        'delete ingredient ': '/api/ingredients/delete/{ingredientID}',
        'get calories generated by fat pro carb': '/api/ingredients/caloriesgenerated/{ingredientID}'

    }

    return Response(api_urls)


# list all ingredients
@api_view(['GET'])
def ingredientList(request):
    ingredients = Ingredient.objects.all()
    serializer = IngredientSerializer(ingredients, many=True)
    return Response(serializer.data)


# list  ingredients of a category
@api_view(['GET'])
def categoryIngredientList(request, pk):
    category = Category.objects.get(id=pk)
    ingredients = Ingredient.objects.filter(category=category)
    serializer = IngredientSerializer(ingredients, many=True)
    return Response(serializer.data)


# list  ingredients no nutritionals
@api_view(['GET'])
def noNutritionalIngredientList(request):
    ingredients = Ingredient.objects.filter(cal=0)
    serializer = IngredientSerializer(ingredients, many=True)
    return Response(serializer.data)


# get calories generated by fat pro carb
@api_view(['GET'])
def caloriesGenerated(request, pk):
    ingredient = Ingredient.objects.get(id=pk)
    calByCarb = ingredient.car * 4
    calByProt = ingredient.pro * 4
    calByFat = ingredient.fat * 9
    calTot = calByCarb + calByProt + calByFat

    calByCarbPerc = calByCarb * 100 / calTot
    calByProtPerc = calByProt * 100 / calTot
    calByFatPerc = calByFat * 100 / calTot

    calgen = {
        'calByCarb': calByCarb,
        'calByProt': calByProt,
        'calByFat': calByFat,
        'calByCarbPerc': calByCarbPerc,
        'calByProtPerc': calByProtPerc,
        'calByFatPerc': calByFatPerc,
    }
    return Response(calgen)
